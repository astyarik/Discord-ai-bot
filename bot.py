import os
import time
import base64
import random
from io import BytesIO

import discord
from discord import app_commands, Interaction
from discord.ext import commands
from dotenv import load_dotenv

try:
    from openai import OpenAI
except Exception:
    OpenAI = None  # type: ignore


# –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
print("üîç –ó–∞–≥—Ä—É–∂–∞—é –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
load_dotenv()

DISCORD_TOKEN = os.getenv("DISCORD_TOKEN", "").strip()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "").strip()
GUILD_ID_RAW = os.getenv("GUILD_ID", "").strip()

print(f"üîë DISCORD_TOKEN: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if DISCORD_TOKEN else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}")
print(f"üîë OPENAI_API_KEY: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if OPENAI_API_KEY else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}")
print(f"üîë GUILD_ID: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if GUILD_ID_RAW else '‚ùå –ù–µ —É–∫–∞–∑–∞–Ω'}")

if not DISCORD_TOKEN:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω DISCORD_TOKEN –≤ .env")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI (–µ—Å–ª–∏ –∫–ª—é—á —É–∫–∞–∑–∞–Ω)
openai_client = None
if OPENAI_API_KEY and OpenAI is not None:
    print("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é OpenAI –∫–ª–∏–µ–Ω—Ç...")
    openai_client = OpenAI(api_key=OPENAI_API_KEY)
    print("‚úÖ OpenAI –∫–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤!")
else:
    print("‚ùå OpenAI –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    if not OPENAI_API_KEY:
        print("   –ü—Ä–∏—á–∏–Ω–∞: OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
    if OpenAI is None:
        print("   –ü—Ä–∏—á–∏–Ω–∞: –ü–∞–∫–µ—Ç openai –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

intents = discord.Intents.default()
bot = commands.Bot(command_prefix="!", intents=intents)
tree = bot.tree

# –û–±—â–∞—è –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞ –¥–ª—è /image (–≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –≤—Å–µ–π –∫–æ–º–∞–Ω–¥—ã)
IMAGE_COOLDOWN_SECONDS = 180
_last_image_command_ts: float = 0.0


def _seconds_left_for_image() -> int:
    if _last_image_command_ts <= 0:
        return 0
    remain = int(_last_image_command_ts + IMAGE_COOLDOWN_SECONDS - time.time())
    return remain if remain > 0 else 0


@bot.event
async def on_ready():
    guild_for_sync = None
    if GUILD_ID_RAW:
        try:
            guild_for_sync = discord.Object(id=int(GUILD_ID_RAW))
        except ValueError:
            print("GUILD_ID –∑–∞–¥–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞—é –ª–æ–∫–∞–ª—å–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é.")

    try:
        if guild_for_sync is not None:
            await tree.sync(guild=guild_for_sync)
            print(f"–°–ª—ç—à-–∫–æ–º–∞–Ω–¥—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –≥–∏–ª—å–¥–∏–∏ {GUILD_ID_RAW}")
        else:
            await tree.sync()
            print("–°–ª—ç—à-–∫–æ–º–∞–Ω–¥—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≥–ª–æ–±–∞–ª—å–Ω–æ (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ —á–∞—Å–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏)")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–ª—ç—à-–∫–æ–º–∞–Ω–¥: {e}")

    print(f"–í–æ—à—ë–ª –∫–∞–∫ {bot.user} (ID: {bot.user.id})")


@app_commands.describe(prompt="–ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
@tree.command(name="image", description="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É")
async def image_cmd(interaction: Interaction, prompt: str):
    global _last_image_command_ts

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏ (–≥–ª–æ–±–∞–ª—å–Ω–∞—è)
    remain = _seconds_left_for_image()
    if remain > 0:
        await interaction.response.send_message(
            f"–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞ –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–µ. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë {remain} —Å–µ–∫.", ephemeral=True
        )
        return

    if openai_client is None:
        await interaction.response.send_message(
            "OpenAI API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –£–∫–∞–∂–∏—Ç–µ OPENAI_API_KEY –≤ .env", ephemeral=True
        )
        return

    await interaction.response.defer(thinking=True)

    try:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ OpenAI Images API
        result = openai_client.images.generate(
            model="dall-e-3",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å
            prompt=prompt,
            size="1024x1024",
        )
        image_url = result.data[0].url
        
        # –°–æ–∑–¥–∞–µ–º embed —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        embed = discord.Embed(title="üñºÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", description=f"**–ó–∞–ø—Ä–æ—Å:** {prompt}")
        embed.set_image(url=image_url)
        embed.set_footer(text="–°–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é OpenAI DALL-E 3")
        
        await interaction.followup.send(embed=embed)
        _last_image_command_ts = time.time()
        
    except Exception as e:
        error_msg = str(e)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫ OpenAI
        if "billing_hard_limit_reached" in error_msg:
            await interaction.followup.send(
                "‚ùå **–û—à–∏–±–∫–∞ –±–∏–ª–ª–∏–Ω–≥–∞ OpenAI:** –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ –æ–ø–ª–∞—Ç–µ.\n\n"
                "–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
                ephemeral=True
            )
        elif "insufficient_quota" in error_msg:
            await interaction.followup.send(
                "‚ùå **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–≤–æ—Ç—ã:** –ò—Å—á–µ—Ä–ø–∞–Ω –ª–∏–º–∏—Ç API –∑–∞–ø—Ä–æ—Å–æ–≤.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∏–ª–ª–∏–Ω–≥–∞.", 
                ephemeral=True
            )
        elif "rate_limit" in error_msg:
            await interaction.followup.send(
                "‚ö†Ô∏è **–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤:** –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API.\n\n"
                "–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", 
                ephemeral=True
            )
        else:
            await interaction.followup.send(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:\n```{error_msg}```", 
                ephemeral=True
            )


@app_commands.describe(query="–í–∞—à –≤–æ–ø—Ä–æ—Å –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏")
@tree.command(name="ask", description="–û—Ç–≤–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å")
async def ask_cmd(interaction: Interaction, query: str):
    if openai_client is None:
        await interaction.response.send_message(
            "OpenAI API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –£–∫–∞–∂–∏—Ç–µ OPENAI_API_KEY", ephemeral=True
        )
        return

    await interaction.response.defer(thinking=True)

    try:
        # –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç (—á–∞—Ç-–º–æ–¥–µ–ª—å)
        resp = openai_client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–¢—ã –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É –æ—Ç–≤–µ—á–∞—é—â–∏–π –ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."},
                {"role": "user", "content": query},
            ],
            temperature=0.7,
        )
        answer = resp.choices[0].message.content or "(–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç)"
        
        # –°–æ–∑–¥–∞–µ–º embed –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        embed = discord.Embed(title="ü§ñ –û—Ç–≤–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏", description=answer)
        embed.add_field(name="–í–æ–ø—Ä–æ—Å", value=query, inline=False)
        embed.set_footer(text="–û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å –ø–æ–º–æ—â—å—é OpenAI GPT-4o-mini")
        
        await interaction.followup.send(embed=embed)
        
    except Exception as e:
        error_msg = str(e)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫ OpenAI
        if "billing_hard_limit_reached" in error_msg:
            await interaction.followup.send(
                "‚ùå **–û—à–∏–±–∫–∞ –±–∏–ª–ª–∏–Ω–≥–∞ OpenAI:** –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ –æ–ø–ª–∞—Ç–µ.\n\n"
                "–ö–æ–º–∞–Ω–¥–∞ `/ask` –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", 
                ephemeral=True
            )
        elif "insufficient_quota" in error_msg:
            await interaction.followup.send(
                "‚ùå **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–≤–æ—Ç—ã:** –ò—Å—á–µ—Ä–ø–∞–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∏–ª–ª–∏–Ω–≥–∞.", 
                ephemeral=True
            )
        elif "rate_limit" in error_msg:
            await interaction.followup.send(
                "‚ö†Ô∏è **–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤:** –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤.\n\n"
                "–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", 
                ephemeral=True
            )
        else:
            await interaction.followup.send(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏:\n```{error_msg}```", 
                ephemeral=True
            )


@app_commands.describe(question="–û —á—ë–º —Å–ø—Ä–æ—Å–∏—Ç—å —à–∞—Ä?")
@tree.command(name="ball", description="–®–∞—Ä —Å—É–¥—å–±—ã: –¥–∞/–Ω–µ—Ç/–Ω–µ–∑–Ω–∞—é/–≤–æ–∑–º–æ–∂–Ω–æ")
async def ball_cmd(interaction: Interaction, question: str):
    answers = ["–¥–∞", "–Ω–µ—Ç", "–Ω–µ–∑–Ω–∞—é", "–≤–æ–∑–º–æ–∂–Ω–æ"]
    choice = random.choice(answers)
    
    # –°–æ–∑–¥–∞–µ–º embed –¥–ª—è –æ—Ç–≤–µ—Ç–∞ —à–∞—Ä–∞
    embed = discord.Embed(title="üîÆ –®–∞—Ä —Å—É–¥—å–±—ã", color=0x9b59b6)
    embed.add_field(name="–í–æ–ø—Ä–æ—Å", value=question, inline=False)
    embed.add_field(name="–û—Ç–≤–µ—Ç", value=f"**{choice.upper()}**", inline=False)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ç–≤–µ—Ç–∞
    if choice == "–¥–∞":
        embed.add_field(name="", value="‚úÖ", inline=False)
    elif choice == "–Ω–µ—Ç":
        embed.add_field(name="", value="‚ùå", inline=False)
    elif choice == "–Ω–µ–∑–Ω–∞—é":
        embed.add_field(name="", value="ü§∑‚Äç‚ôÇÔ∏è", inline=False)
    else:
        embed.add_field(name="", value="ü§î", inline=False)
    
    await interaction.response.send_message(embed=embed)


if __name__ == "__main__":
    bot.run(DISCORD_TOKEN)
